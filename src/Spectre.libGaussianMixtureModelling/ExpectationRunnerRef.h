/*
 * ExpectationRunnerRef.h
 * Provides reference implementation of expectation part of EM algorithm
 * used for Gaussian Mixture Modelling.
 * 
 * Knowledge required for understanding the following code has been
 * presented in the following document
 * https://brilliant.org/wiki/gaussian-mixture-model/#learning-the-model
 * which shall serve as a mathematical reference, and to which the
 * comments in the code will refer to.
 *
 * In regard to the following code concerning Expectation procedure,
 * please refer to 
 * Learning the Model 
 *      Algorithm for Univariate Gaussian Mixture Models 
 *           Expectation (E) Step
 *
Copyright 2017-2018 Michal Gallus

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#pragma once
#include <vector>
#include "Spectre.libException/NullPointerException.h"
#include "DataTypes.h"
#include "GaussianDistribution.h"
#include "GaussianMixtureModel.h"
#include "Matrix.h"

namespace spectre::unsupervised::gmm
{
/// <summary>
/// Class serves the purpose of expectation step of Expectation Maximization
/// algorithm. Serves as a reference to learn from and is purpously not
/// optimized to avoid obfuscation of the code.
/// </summary>
class ExpectationRunnerRef
{
public:
    /// <summary>
    /// Basic constructor.
    /// </summary>
    /// <param name="spectrum">Spectrum from which array of m/z values is
    /// fetched.</param>
    ExpectationRunnerRef(SpectrumView spectrum)
    {
        spectrum.mzs.size(); // Needed to avoid warning of unused param.
    }

    /// <summary>
    /// Fills affilation (gamma) matrix with probabilities of affilation of
    /// each sample to a certain gaussian component.
    /// </summary>
    /// <param name="affilationMatrix">Matrix symbolising the probability
    /// of affilation of each sample to a certain gaussian component that
    /// is to be updated.</param>
    /// <param name="spectrum">Spectrum to operate on.</param>
    /// <param name="components">Gaussian components</param>
    void Expectation(Matrix<DataType> &affilationMatrix, SpectrumView spectrum,
        GaussianMixtureModel& components)
    {
        // This part conducts the instruction:
        // "Calculate gamma for each i and k
        // Where gamma is the probability that xi is generated by component
        // Ck, Thus gamma(i, k) = p(Ck|xi, phi, mu, sigma)"
        // from the document
        DataView mzs = spectrum.mzs;
        for (unsigned i = 0; i < (unsigned)mzs.size(); i++)
        {
            DataType denominator = 0.0;
            const unsigned numberOfComponents = (unsigned)components.size();
            for (unsigned k = 0; k < numberOfComponents; k++)
            {
                denominator += components[k].weight *
                    Gaussian(mzs[i], components[k].mean,
                        components[k].deviation);
            }

            for (unsigned k = 0; k < numberOfComponents; k++)
            {
                DataType numerator = components[k].weight *
                    Gaussian(mzs[i], components[k].mean,
                        components[k].deviation);
                affilationMatrix[k][i] = numerator / denominator;
            }
        }
    }
};
}
